public class PE075 {

	public static void main(String[] args) {
		long startTime = System.nanoTime();

		// we can generate every primitive triplet by
		// iterating over the integers m, n such that m > n,
		// and m+n is odd and gcd(n,m) ) 1 then the triplets are generated by

		// a = m^2 – n^2
		// b = 2*m*n
		// c = m^2 + n^2

		// Based on this we can generate all triplets by taking
		// multiples of the primitive triplets such that

		// a = k*(m^2 – n^2)
		// b = 2*k*m*n
		// c = k*(m^2 + n^2)

		int limit = 1500000;
		int[] triangles = new int[limit + 1];

		int result = 0;
		int mlimit = (int) Math.sqrt(limit / 2);

		for (long m = 2; m < mlimit; m++) {
			for (long n = 1; n < m; n++) {
				if (((n + m) % 2) == 1 && gcd(n, m) == 1) {
					long a = m * m + n * n;
					long b = m * m - n * n;
					long c = 2 * m * n;
					long p = a + b + c;
					while (p <= limit) {
						triangles[(int) p]++;
						if (triangles[(int) p] == 1)
							result++;
						if (triangles[(int) p] == 2)
							result--;
						p += a + b + c;
					}
				}
			}
		}

		System.out.println("Answer: " + result);

		long endTime = System.nanoTime();
		System.out.printf("Total Time: %.6f seconds\n",
				((endTime - startTime) / 1000000000.0));

	}

	public static long gcd(long n, long m) {
		while (m != 0) {
			long t = m;
			m = n % m;
			n = t;
		}
		return n;
	}
}
